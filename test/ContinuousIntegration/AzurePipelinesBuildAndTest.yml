variables:
  ITKGitTag: master
  CMakeBuildType: Release

trigger:
  batch: true
  branches:
    include:
    - master

jobs:

- job: 'Test'
  displayName: "Build and test"
  timeoutInMinutes: 0
  cancelTimeoutInMinutes: 300

  strategy:
    matrix:
      Linux:
        imageName: 'ubuntu-18.04'
        cCompiler: gcc
        cxxCompiler: g++
        compilerInitialization: 'g++ --version'
      macOS:
        imageName: 'macos-10.15'
        cCompiler: clang
        cxxCompiler: clang++
        compilerInitialization: ''
      Windows:
        imageName: 'windows-2019'
        cCompiler: cl.exe
        cxxCompiler: cl.exe
        compilerInitialization: 'call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"'

  pool:
    vmImage: $(imageName)

  steps:
  - powershell: |
      Write-Host "##vso[task.prependpath]$(Agent.BuildDirectory)\ITK-build\bin"
  - powershell: |
      Write-Host "PATH: $env:PATH"

  - bash: |
      set -x
      if [ -n "$(System.PullRequest.SourceCommitId)" ]; then
        git checkout $(System.PullRequest.SourceCommitId)
      fi
    displayName: 'Checkout pull request HEAD'

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      python -m pip install --upgrade setuptools
      python -m pip install scikit-ci-addons
      python -m pip install cookiecutter
      python -m pip install ninja
    displayName: 'Install build dependencies'

  - script: |
      git clone --depth 5 --branch $(ITKGitTag) https://github.com/InsightSoftwareConsortium/ITK.git
    workingDirectory: $(Agent.BuildDirectory)
    displayName: 'Download ITK'

  - script: |
      mkdir ITK-build
      cd ITK-build
      $(compilerInitialization)
      cmake -DCMAKE_C_COMPILER:FILEPATH="$(cCompiler)" -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_CXX_COMPILER="$(cxxCompiler)" -DCMAKE_BUILD_TYPE:STRING=$(CMakeBuildType) -DBUILD_TESTING:BOOL=OFF -GNinja ../ITK
      ninja
    workingDirectory: $(Agent.BuildDirectory)
    displayName: 'Build ITK'

  - bash: |
      cat > dashboard.cmake << EOF
      set(CTEST_SITE "Azure.\$ENV{AGENT_MACHINENAME}")
      file(TO_CMAKE_PATH "\$ENV{AGENT_BUILDDIRECTORY}" CTEST_DASHBOARD_ROOT)
      file(TO_CMAKE_PATH "\$ENV{BUILD_SOURCESDIRECTORY}" CTEST_SOURCE_DIRECTORY)
      file(TO_CMAKE_PATH "\$ENV{AGENT_BUILDDIRECTORY}/build" CTEST_BINARY_DIRECTORY)
      set(dashboard_source_name "$(Build.Repository.Name)")
      if(DEFINED ENV{SYSTEM_PULLREQUEST_SOURCEBRANCH})
        set(branch "-\$ENV{SYSTEM_PULLREQUEST_SOURCEBRANCH}")
        set(dashboard_model "Experimental")
      elseif(ENV{BUILD_SOURCEBRANCHNAME} STREQUAL "master")
        set(branch "-master")
        set(dashboard_model "Continuous")
      else()
        set(branch "-\$ENV{BUILD_SOURCEBRANCHNAME}")
        set(dashboard_model "Experimental")
      endif()
      if(DEFINED ENV{SYSTEM_PULLREQUEST_PULLREQUESTNUMBER})
        set(pr "-PR\$ENV{SYSTEM_PULLREQUEST_PULLREQUESTNUMBER}")
      else()
        set(pr "")
      endif()
      set(CTEST_BUILD_NAME "$(Build.Repository.Name)-$(Agent.OS)-Build$(Build.BuildId)\${pr}\${branch}")
      set(CTEST_UPDATE_VERSION_ONLY 1)
      set(CTEST_TEST_ARGS \${CTEST_TEST_ARGS} PARALLEL_LEVEL \${PARALLEL_LEVEL})
      set(CTEST_CONFIGURATION_TYPE "Release")
      set(CTEST_CMAKE_GENERATOR "Ninja")
      set(CTEST_CUSTOM_WARNING_EXCEPTION
        \${CTEST_CUSTOM_WARNING_EXCEPTION}
        # macOS Azure Pipelines
        "ld: warning: text-based stub file"
        )
      set(dashboard_no_clean 1)
      set(ENV{CC} $(cCompiler))
      set(ENV{CXX} $(cxxCompiler))
      string(TIMESTAMP build_date "%Y-%m-%d")
      message("CDash Build Identifier: \${build_date} \${CTEST_BUILD_NAME}")
      message("CTEST_SITE = \${CTEST_SITE}")
      ctest_start(Experimental)
      ctest_configure(OPTIONS "-DITK_DIR:PATH=\${CTEST_DASHBOARD_ROOT}/ITK-build;-DBUILD_SHARED_LIBS:BOOL=ON")
      CTEST_READ_CUSTOM_FILES("${CTEST_SOURCE_DIRECTORY}/Modules/Remote/RTK")
      ctest_build(RETURN_VALUE build_Results)
      ctest_test(RETURN_VALUE test_Results)
      ctest_submit(RETURN_VALUE submit_Results)
      EOF
      cat dashboard.cmake
    displayName: 'Configure CTest script'

  - script: |
      $(compilerInitialization)
      ctest -j 2 -V -S dashboard.cmake
